import pkg_resources
import numpy as np
from astropy import units as u
from astropy.coordinates import SkyCoord
import astropy.io.ascii as asc  
import pandas as pd

def load_jscon_random_stars():
    """load galcen random_stars.csv  and Hw computed by jscon (https://github.com/2ndmk2/jscon) 

    Returns:
        Pandas DataFrame
    """
    position_file = pkg_resources.resource_filename('jis',
                                                    'data/random_stars.csv')
    data = pd.read_csv(position_file, delimiter=",")
    return data

def random_stars_to_starplate(random_star_data, jasmine_wcs, starplate_filename = "galcen_star_plate.csv"):
    """generate starplate instance from random_star_data

    Args:
        random_star_data : randoam_star_data generated by load_jscon_random_stars()
        jasmine_wcs : JASMINE astropy.wcs instance
        starplate_filename (str, optional): starplate csv output filename Defaults to "galcen_star_plate.csv".

    Returns:
        _type_: _description_
    """
    coord = SkyCoord(ra=random_star_data["ra"].values * u.degree,
                     dec=random_star_data["dec"].values * u.degree)
    xpixel, ypixel = jasmine_wcs.world_to_pixel(coord)
    hwmag = random_star_data["hwmag"].values
    lambda_ = np.zeros_like(hwmag)
    beta_ = np.zeros_like(hwmag)
    plate_index = np.zeros_like(hwmag, dtype=int)
    star_index = np.array(range(len(hwmag)), dtype=int)
    table_starplate = pd.DataFrame({
        "plate index": plate_index,
        "star index": star_index,
        "x pixel": xpixel,
        "y pixel": ypixel,
        "lambda": lambda_,
        "beta": beta_,
        "Hwmag": hwmag
    })
    table_starplate.to_csv(starplate_filename, index=False)
    table_starplate = asc.read(starplate_filename)

    return table_starplate

def maximum_separation(random_star_data):
    """compute the max separation in random star catalog

    Args:
        random_star_data : randoam_star_data generated by load_jscon_random_stars()
        
    Returns:
        float: separation in degree
    """
    ramin = (np.min(random_star_data["ra"]))
    decmin = (np.min(random_star_data["dec"]))
    ramax = (np.max(random_star_data["ra"]))
    decmax = (np.max(random_star_data["dec"]))

    pmin = SkyCoord(ra=ramin * u.degree,
                     dec=decmin * u.degree)
    pmax = SkyCoord(ra=ramax * u.degree,
                         dec=decmax * u.degree)
    sep = pmin.separation(pmax).degree
    return sep